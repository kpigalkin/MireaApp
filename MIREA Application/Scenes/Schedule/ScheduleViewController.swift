//
//  ScheduleViewController.swift
//  MIREA Application
//
//  Created by Кирилл Пигалкин on 04.08.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ScheduleDisplayLogic: AnyObject {
  func displaySomething(viewModel: Schedule.Something.ViewModel)
}

final class ScheduleViewController: UIViewController, ScheduleDisplayLogic
{
  var interactor: ScheduleBusinessLogic?
  var router: (NSObjectProtocol & ScheduleRoutingLogic)?
    var scheduleView = ScheduleView()

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = ScheduleInteractor()
    let presenter = SchedulePresenter()
    let router = ScheduleRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = self
    router.viewController = self
//    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  
  
  // MARK: View lifecycle
    
    override func loadView() {
        view = scheduleView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
    }
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        setGradientBackground()
    }
    
    func setGradientBackground() {
        let colorTop = Colors.defaultTheme.sand.cgColor
        let colorBottom = Colors.defaultTheme.darkBlue.cgColor
                    
        let gradientLayer = CAGradientLayer()
        gradientLayer.colors = [colorTop, colorBottom]
        gradientLayer.locations = [0.2, 0.85]
        gradientLayer.frame = self.view.bounds
                
        self.view.layer.insertSublayer(gradientLayer, at:0)
    }
    
  // MARK: Do something
    func doSomething() {
        let request = Schedule.Something.Request()
//        interactor?.doSomething(request: request)
    }
  
    func displaySomething(viewModel: Schedule.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}
